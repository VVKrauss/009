-- üóíÔ∏è –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ v2.0 - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
-- ===============================================================

-- 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
-- ================================
CREATE TABLE IF NOT EXISTS comments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    event_id UUID NOT NULL,
    author_id UUID REFERENCES auth.users(id) NOT NULL,
    parent_id UUID REFERENCES comments(id) ON DELETE CASCADE,
    text TEXT NOT NULL CHECK (char_length(text) >= 1 AND char_length(text) <= 5000),
    likes_count INTEGER DEFAULT 0 CHECK (likes_count >= 0),
    replies_count INTEGER DEFAULT 0 CHECK (replies_count >= 0),
    is_deleted BOOLEAN DEFAULT false,
    is_edited BOOLEAN DEFAULT false,
    edited_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∞–π–∫–æ–≤
-- ==========================
CREATE TABLE IF NOT EXISTS comment_likes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    comment_id UUID REFERENCES comments(id) ON DELETE CASCADE NOT NULL,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(comment_id, user_id)
);

-- 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
-- ===============================
CREATE TABLE IF NOT EXISTS comment_notifications (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    recipient_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    sender_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    comment_id UUID REFERENCES comments(id) ON DELETE CASCADE NOT NULL,
    event_id UUID NOT NULL,
    type TEXT CHECK (type IN ('reply', 'like', 'mention')) NOT NULL,
    is_read BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 4. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
-- ===========================================
CREATE INDEX IF NOT EXISTS idx_comments_event_id ON comments(event_id);
CREATE INDEX IF NOT EXISTS idx_comments_author_id ON comments(author_id);
CREATE INDEX IF NOT EXISTS idx_comments_parent_id ON comments(parent_id);
CREATE INDEX IF NOT EXISTS idx_comments_created_at ON comments(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_comments_likes_count ON comments(likes_count DESC);

CREATE INDEX IF NOT EXISTS idx_comment_likes_comment_id ON comment_likes(comment_id);
CREATE INDEX IF NOT EXISTS idx_comment_likes_user_id ON comment_likes(user_id);

CREATE INDEX IF NOT EXISTS idx_notifications_recipient_id ON comment_notifications(recipient_id);
CREATE INDEX IF NOT EXISTS idx_notifications_event_id ON comment_notifications(event_id);
CREATE INDEX IF NOT EXISTS idx_notifications_unread ON comment_notifications(recipient_id, is_read);

-- 5. –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
-- ==========================================

-- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_comments_updated_at
    BEFORE UPDATE ON comments
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ª–∞–π–∫–æ–≤
CREATE OR REPLACE FUNCTION update_likes_count()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        UPDATE comments 
        SET likes_count = likes_count + 1
        WHERE id = NEW.comment_id;
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        UPDATE comments 
        SET likes_count = likes_count - 1
        WHERE id = OLD.comment_id;
        RETURN OLD;
    END IF;
    RETURN NULL;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_comment_likes_count
    AFTER INSERT OR DELETE ON comment_likes
    FOR EACH ROW
    EXECUTE FUNCTION update_likes_count();

-- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤
CREATE OR REPLACE FUNCTION update_replies_count()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' AND NEW.parent_id IS NOT NULL THEN
        UPDATE comments 
        SET replies_count = replies_count + 1
        WHERE id = NEW.parent_id;
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' AND OLD.parent_id IS NOT NULL THEN
        UPDATE comments 
        SET replies_count = replies_count - 1
        WHERE id = OLD.parent_id;
        RETURN OLD;
    END IF;
    RETURN COALESCE(NEW, OLD);
END;
$$ language 'plpgsql';

CREATE TRIGGER update_comment_replies_count
    AFTER INSERT OR DELETE ON comments
    FOR EACH ROW
    EXECUTE FUNCTION update_replies_count();

-- 6. –ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (RLS)
-- ==============================

-- –í–∫–ª—é—á–∞–µ–º RLS
ALTER TABLE comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE comment_likes ENABLE ROW LEVEL SECURITY;
ALTER TABLE comment_notifications ENABLE ROW LEVEL SECURITY;

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è comments
CREATE POLICY "–í—Å–µ –º–æ–≥—É—Ç —á–∏—Ç–∞—Ç—å –Ω–µ—É–¥–∞–ª–µ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
    ON comments FOR SELECT
    USING (is_deleted = false);

CREATE POLICY "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
    ON comments FOR INSERT
    WITH CHECK (auth.uid() = author_id);

CREATE POLICY "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
    ON comments FOR UPDATE
    USING (auth.uid() = author_id);

CREATE POLICY "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
    ON comments FOR DELETE
    USING (auth.uid() = author_id);

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è comment_likes
CREATE POLICY "–í—Å–µ –º–æ–≥—É—Ç —á–∏—Ç–∞—Ç—å –ª–∞–π–∫–∏"
    ON comment_likes FOR SELECT
    USING (true);

CREATE POLICY "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏"
    ON comment_likes FOR INSERT
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ –ª–∞–π–∫–∏"
    ON comment_likes FOR DELETE
    USING (auth.uid() = user_id);

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è comment_notifications
CREATE POLICY "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    ON comment_notifications FOR SELECT
    USING (auth.uid() = recipient_id);

CREATE POLICY "–°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    ON comment_notifications FOR INSERT
    WITH CHECK (true);

CREATE POLICY "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    ON comment_notifications FOR UPDATE
    USING (auth.uid() = recipient_id);

-- 7. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
-- ====================================

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ—Ä–∞—Ö
CREATE OR REPLACE FUNCTION get_comments_with_authors(event_uuid UUID)
RETURNS TABLE (
    id UUID,
    event_id UUID,
    author_id UUID,
    parent_id UUID,
    text TEXT,
    likes_count INTEGER,
    replies_count INTEGER,
    is_deleted BOOLEAN,
    is_edited BOOLEAN,
    edited_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE,
    author_name TEXT,
    author_avatar TEXT,
    user_liked BOOLEAN
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        c.id,
        c.event_id,
        c.author_id,
        c.parent_id,
        c.text,
        c.likes_count,
        c.replies_count,
        c.is_deleted,
        c.is_edited,
        c.edited_at,
        c.created_at,
        COALESCE(p.full_name, p.email, '–ê–Ω–æ–Ω–∏–º') as author_name,
        p.avatar_url as author_avatar,
        EXISTS(
            SELECT 1 FROM comment_likes cl 
            WHERE cl.comment_id = c.id AND cl.user_id = auth.uid()
        ) as user_liked
    FROM comments c
    LEFT JOIN profiles p ON c.author_id = p.id
    WHERE c.event_id = event_uuid 
    AND c.is_deleted = false
    ORDER BY c.created_at ASC;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
CREATE OR REPLACE FUNCTION create_comment_notification(
    recipient_uuid UUID,
    sender_uuid UUID,
    comment_uuid UUID,
    event_uuid UUID,
    notification_type TEXT
)
RETURNS UUID AS $$
DECLARE
    notification_id UUID;
BEGIN
    -- –ù–µ —Å–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ
    IF recipient_uuid = sender_uuid THEN
        RETURN NULL;
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    SELECT id INTO notification_id 
    FROM comment_notifications 
    WHERE recipient_id = recipient_uuid 
    AND sender_id = sender_uuid 
    AND comment_id = comment_uuid 
    AND type = notification_type;
    
    -- –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
    IF notification_id IS NULL THEN
        INSERT INTO comment_notifications (
            recipient_id, sender_id, comment_id, event_id, type
        ) VALUES (
            recipient_uuid, sender_uuid, comment_uuid, event_uuid, notification_type
        ) RETURNING id INTO notification_id;
    END IF;
    
    RETURN notification_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 8. –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
-- ================================
/*
-- Uncomment to insert test data
INSERT INTO comments (event_id, author_id, text) VALUES 
('123e4567-e89b-12d3-a456-426614174000', auth.uid(), '–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!'),
('123e4567-e89b-12d3-a456-426614174000', auth.uid(), '–°–æ–≥–ª–∞—Å–µ–Ω, –æ—á–µ–Ω—å –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ!');
*/

-- –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
SELECT '–°–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ v2.0 —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!' as status;